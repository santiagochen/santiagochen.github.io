{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/happy-talk-about-react-redux","result":{"data":{"markdownRemark":{"html":"<h3>Happy Talk about React Redux</h3>\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E8%AF%8D\">关键词</a></li>\n<li><a href=\"#Hello-World\">Hello World</a></li>\n</ul>\n<h4>概述</h4>\n<h4>来到<a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"nofollow\">React Redux官网</a>, 了解了下内容得到以下几点重要信息：</h4>\n<ul>\n<li>它为什么出现:\n本身Redux是一个独立的库，它其实可以不仅仅用于react;为了让它更好的服务于react,于是有了react redux的出现。React Redux就是官方与React所绑定的Redux库。它为我们提供了一种合理的途径来进行数据与UI之间的绑定，这让我们的代码更加合理也同时又降低了一些使用门槛。</li>\n<li>\n<p>它的特点:\nReact-Redux 将所有组件分成两大类：</p>\n<ul>\n<li>\n<p>UI 组件（presentational component）这是开发者需要自己的业务实现组件</p>\n<ul>\n<li>只负责 UI 的呈现，不带有任何业务逻辑</li>\n<li>没有状态（即不使用this.state这个变量）</li>\n<li>所有数据都由参数（this.props）提供</li>\n<li>不使用任何 Redux 的 API</li>\n</ul>\n</li>\n<li>\n<p>容器组件（container component）容器组件由 React-Redux 自动生成</p>\n<ul>\n<li>负责管理数据和业务逻辑，不负责 UI 的呈现</li>\n<li>带有内部状态</li>\n<li>使用 Redux 的 API</li>\n<li>\n<p><strong>这里划重点!!!</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { connect } from &#39;react-redux&#39;\nconst VisibleTodoList = connect()(TodoList);</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>关键词</h4>\n<ul>\n<li><a href=\"#Provider%E6%8F%8F%E8%BF%B0\">Provider, &#x3C;Provider store={store}></a></li>\n<li><a href=\"#createStore%E6%8F%8F%E8%BF%B0\">createStore, const store=createStore(reducer)</a></li>\n<li><a href=\"#connect%E6%8F%8F%E8%BF%B0\">connect(mapStateToProps?, mapDispatchToProps? )</a></li>\n</ul>\n<h3>Provider描述</h3>\n<p>原文为:</p>\n<p>The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function.</p>\n<p>翻译成中国话就是: </p>\n<p>Provider让任何嵌套组件(注意前提!!!它的被connect()包裹着才行哦!!!)都能获取到Redux的数据</p>\n<h3>createStore描述</h3>\n<p>创建一个数据池，供Provide使用</p>\n<h3>connect描述</h3>\n<h4>连接组件和redux-store</h4>\n<p>  connect : 用来连接react组件和redux store, 生成react-redux的容器组件</p>\n<ul>\n<li>\n<p>参数 </p>\n<ul>\n<li>mapStateToProps : 前者负责输入逻辑, 即将state映射到 UI 组件的参数（props）</li>\n<li>\n<p>mapDispatchToProps : 后者负责输出逻辑, 即将用户对 UI 组件的操作映射成 Action</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { connect } from &#39;react-redux&#39;\nconst VisibleTodoList = connect(\nmapStateToProps,\nmapDispatchToProps\n)(TodoList)</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Hello World</h3>\n<blockquote>\n<p>我们以官网的todos例子来说明</p>\n</blockquote>\n<ul>\n<li>\n<p>index.js里面直接用Provide包裹整个应用; store具体是什么?? 我们先hold住，把这个<a href=\"#%E6%A2%97\">梗</a>记住，先把全局过一遍，细节一会解释。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Provider } from &quot;react-redux&quot;;\nimport store from &quot;./redux/store&quot;;\n&lt;Provider store={store}&gt;\n&lt;App /&gt;\n&lt;/Provider&gt;,</code></pre></div>\n</li>\n<li>\n<p>然后我们接着看App可以怎么定义: <strong>嵌入了AddTodo,TodoList和VisibilityFilters三个组件</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import AddTodo from &quot;./components/AddTodo&quot;;\nimport TodoList from &quot;./components/TodoList&quot;;\nimport VisibilityFilters from &quot;./components/VisibilityFilters&quot;;</code></pre></div>\n</li>\n</ul>\n<p>export default function TodoApp() {\nreturn (\n<div className=\"todo-app\">\n...\n<AddTodo />\n<TodoList />\n<VisibilityFilters />\n</div>\n);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- #### 先看AddTodo这个组件,注意两点:\n  - 暴露组件用的是 **export default connnect(...)(AddTodo)** 这个格式！！！它就是我们前面提到的 [连接组件和redux-store](#连接组件和redux-store)\n  - connect(null, { addTodo }) 它写成这样更能让你引起注意 connect(null, { &quot;addTodo&quot; : addTodo }); 注意重点！前面说过connect的参数(第一个输入, 第二个输出)，现在这里是输出(缺少输入, [定义输入的例子看这里](#TodoList))，其实是对应props。{ &quot;addTodo&quot; : addTodo } 表示 this.props.addTodo = addTodo; 这里的后者addTodo来自&quot;../redux/actions&quot;。所以接下来我们赶紧看下这个文件</code></pre></div>\n<p>import { connect } from \"c\";\nimport { addTodo } from \"../redux/actions\";\nclass AddTodo extends React.Component {\n...\nhandleAddTodo = () => {\nthis.props.addTodo(this.state.input);\nthis.setState({ input: \"\" });\n};\n...\n<button className=\"add-todo\" onClick={this.handleAddTodo}>\nAdd Todo\n</button>\n}\nexport default connect(null, { addTodo })(AddTodo);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- ../redux/actions 这里面原来就是定义了返回什么。 以addTodo来看, \n  - 原来connector的第二个参数(输出)是个返回函数，\n  - 返回的内容格式固定为: {type:..., payload:...} type为名称(actionTypes就是起到个定义常量类型的作用), payload为传递的内容</code></pre></div>\n<p>import { ADD<em>TODO, TOGGLE</em>TODO, SET<em>FILTER } from \"./actionTypes\";\nlet nextTodoId = 0;\nexport const addTodo = content => ({\ntype: ADD</em>TODO,\npayload: {\nid: ++nextTodoId,\ncontent\n}\n});\nexport const toggleTodo = id => ({\ntype: TOGGLE_TODO,\npayload: { id }\n});\nexport const setFilter = ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 到这步我们回到AddTodo这个组件聚焦到它的实现主线：input输入中todo的名称，点击Add Todo就新增这个todo. \n  - \n    ```\n    handleAddTodo = () =&gt; {\n      this.props.addTodo(this.state.input);\n      this.setState({ input: &quot;&quot; });\n    };\n    &lt;button className=&quot;add-todo&quot; onClick={this.handleAddTodo}&gt; \n    ```\n  - 划重点！！！ \n    - 假想: 如果我们不用redux，这里应该是会通过prop传入一个todos的集合, 在发生新增动作时把新的todo加入todos的集合(组件间逐层传递需要的数据)\n    - 现状: 我们通过connector的第二个参数(输出)定义好一个返回函数: \n      ```\n      ()=&gt;{type: ..., payload: ...}\n      ```\n    - 思考差异: 你们有发觉目前现状少了步骤吗?! \n      - 假想中props传入了todos集合, 新增动作发生时把todo加入。如果说用户点击是**触发点**, todo是**货物的内容**，把货物归于todos这个仓库就是**发生的事件**\n      - 现状中新增动作一样，**触发点**同样是用户点击, **货物的内容**是{type:..., payload:...}中的**payload**, 把货物怎么处理的**发生的事件**却没有！\n      - 很显然不去处理货物是不完整的！！！这里react redux是怎么帮我们处理的呢？ 我们别忘了还有**type**! 还记得这句话吗？“Provider让任何嵌套组件(注意前提!!!它的被connect()包裹着才行哦!!!)都能获取到Redux的数据” React Redux就是让数据不用逐层传递，全局可获取，集中化管理，那么肯定还会有个与这个**type**对应的**发生的事件**\n- #### “梗” 还记[这个梗](#Hello-World)吗? &quot;store具体是什么??&quot;\n  为了探究**发生的事件**，我们就继续看看这个store是什么。\n  - ./redux/store 它图通过redux.createStore实例化了store给Provider用。我们可以认为它就是我们这个应用中的数据池了; createStore它消耗了一个参数:reducers\n    ```\n    import { createStore } from &quot;redux&quot;;\n    import rootReducer from &quot;./reducers&quot;;\n    export default createStore(rootReducer);\n    ```\n  - ./reducers 这里用到了redux.combineReducers(他合并reducer), 这只是插曲！我们的目标是探索**发生的事件**是哪里定义？如何和前面的**货物**关联起来！所以我们应该关注合并的**reducer**! \n    ```\n    import { combineReducers } from &quot;redux&quot;;\n    import visibilityFilter from &quot;./visibilityFilter&quot;;\n    import todos from &quot;./todos&quot;;\n    export default combineReducers({ todos, visibilityFilter });\n    ```\n- reducer: &quot;./todos&quot; 看到这个名字，我预感离真相已经不远了。 看看这里定义了什么吧:\n  - 暴露了个function( state, action )\n  - function中逻辑为: 根据**action.type**类型，返回与之相应的内容\n  - 返回与之相应的内容是什么??? 仔细看!!! 它这里其实正是在实现一个**货物**归仓的**事件**。 看到这就完全明了了react redux是如何实现**触发点**, **货物的内容**，以及**发生的事件**的全部了。</code></pre></div>\n<p>  import { ADD<em>TODO, TOGGLE</em>TODO } from \"../actionTypes\";\nconst initialState = {\nallIds: [],\nbyIds: {}\n};\nexport default function(state = initialState, action) {\nswitch (action.type) {\ncase ADD<em>TODO: {\nconst { id, content } = action.payload;\nreturn {\n...state,\nallIds: [...state.allIds, id],\nbyIds: {\n...state.byIds,\n[id]: {\ncontent,\ncompleted: false\n}\n}\n};\n}\ncase TOGGLE</em>TODO: {\nconst { id } = action.payload;\nreturn {\n...state,\nbyIds: {\n...state.byIds,\n[id]: {\n...state.byIds[id],\ncompleted: !state.byIds[id].completed\n}\n}\n};\n}\ndefault:\nreturn state;\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- #### TodoList \n\n( 这里面缺少输出, [定义输出的例子看这里](#先看AddTodo这个组件,注意两点:) )\n\n别忘了，我们还没讨论connector的输入(该组件内获取使用)。现在看看TodoList这里的Connector的参数：输入定义\n\n- #### 看代码中的关键：\n- 这里的todos从哪来的？父级定义中没提供。\n  ```\n  TodoList = ({ todos }) =&gt; (\n  ```\n  ```\n  export default function TodoApp() {\n    return (\n      &lt;div className=&quot;todo-app&quot;&gt;\n        &lt;h1&gt;Todo List&lt;/h1&gt;\n        &lt;AddTodo /&gt;\n        &lt;TodoList /&gt;\n        &lt;VisibilityFilters /&gt;\n      &lt;/div&gt;\n    );\n  }\n  ```\n- 输入的定义，它负责提供了组件内部所需的这个todos。 所以它最终返回是 { todos: todos }。于是该组件内拿到了todos数据用来后续的渲染。</code></pre></div>\n<p>  const mapStateToProps = (state) => {\nconst { visibilityFilter } = state;\nconst todos = getTodosByVisibilityFilter(state, visibilityFilter);\nreturn { todos };\n};\nexport default connect(mapStateToProps)(TodoList);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- state是什么？我们留意到state中有个visibilityFilter，其实state就是我们前面redux.combineReducers(他合并reducer)所产生的数据池。state.visibilityFilter就是对应visibilityFilter的数据。\n\n\n- 最后来个极简总结\n- Provider包裹App，\n- Provide的store由redux.createStore生成\n- connector连接react组件(业务内容与逻辑)和Redux Store; connector(输入:{&#39;xxx&#39;: 输入数据 }，输出:{&#39;xxx&#39;: 货物内容 })(组件) (**触发点**，**货物**)\n- redux.createStore中定义reducer(要发生的事件)\n- reducer(state, action) state为初始值， action为事件类型 (**发生的事件**)\n- 简写代码\n  ```\n  &lt;Provider store&gt;\n  &lt;App&gt;\n  &lt;redux-components&gt;\n  &lt;/App&gt;\n  &lt;Provider&gt;\n\n  Provider.store = redux.createStore( redux.combineReducers( {reducerA, reducerB} ) )\n  reducers.A = function(state = initialState, action) {\n    //inistialState为该数据初始值\n    //action是触发点触发后dispatch的货物，\n    //action的格式通常定为{type: ..., payload: ...}; type为该货物的标识, reducer中根据type做出相应的事件反应; payload为货物信息。\n    return state; //或者更复杂的数据 例如: {state, a, b, ...}\n  }\n  redux-component-A = ReactRedux.connector(ReduxIn, ReduxOut)(component-A)\n\n  //state为Redux的数据池，能获得定义过的全部数据, 名字在redux.combineReducers( {reducerA, reducerB} )中就确定了\n  ReduxIn = (state)=&gt;{\n    return { a:A, b:B } \n    //a,b都是供组件内使用，传递state中的数据进入组件中\n    //A和B是传入的数据, 可能是由state的数据进行组装而来的\n  }\n\n  ReduxOut = {\n    a:A, b:B \n    //a, b都会在组件中使用，某事件发生时，派发消息，消息可以将组件中的数据一并传出来，并最终到达Provider.store。\n    //A和B的通常格式为{type, payload}\n  }\n\n  //React-Redux则会在Reducer内定义根据action.type来监听并响应以做出反应\n  ```</code></pre></div>","timeToRead":8,"frontmatter":{"title":"细说React-Redux","date":"06 Feb 2019","tags":["reactjs"],"path":"blog/happy-talk-about-react-redux","excerpt":"记录点滴: 从redux过度到了react-redux。记录下相关的有趣的一些点。","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/a7715/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/8f7df/placeholder.jpg 250w,\n/static/9757369cb7d5b643993b7f059d41e2c1/0f3a1/placeholder.jpg 500w,\n/static/9757369cb7d5b643993b7f059d41e2c1/a7715/placeholder.jpg 1000w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/good-practise-sync-code","title":"商品码同步实战总结","tags":["nodejs"],"excerpt":"项目总结","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/reading-about-casl","title":"了解CASL后关于权限的思考","tags":["abac"],"excerpt":"一个基于属性的访问控制模块","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/koa-booster","title":"Koa-booster 文档介绍","tags":["nodejs"],"excerpt":"让Koa变得更简单","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/hello-world-rolwins-first-blog","title":"Hello World - Rolwin's first blog 😇","tags":["javascript","html","css"],"excerpt":"Blogging and writing about tech stacks is always been my thing. I like to experiment with different technologies and write my views on them. Web technologies has always been my passion. Check my blog for codebits on various web technologies.","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='297'%20viewBox='0%200%20400%20297'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2029v29h3a6118%206118%200%2001171-25l10-1v-7l-3-16-1-9h-14c-12%200-14%200-14%202h-1c0-2-3-2-52-2a873%20873%200%2000-63%201L17%200H0v29M270%208l1%207-2-1h-4c-2%200-5-5-3-6l-1-2h-4c1%203%200%203-2%201-2-1-2-1-1%201l-1%203-1-2-1-1c-1-1-5%201-5%202s-2%201-6-1l-1%202v2l1%202c0%202%200%202-1%201h-2c-2%201-2%201-3-1l-3-2h-3l-6%201-3%201-2%201-2%201c-3%201-3%202-3%204%200%203%200%203-1%202s-1-1-3%201l-3%204-9%203A5943%205943%200%20010%2061a2002%202002%200%200190-10c-2%203-4-4%208%2053%2011%2054%2012%2058%2013%2058a1581%201581%200%200076-13l-2%205-4%2010-2%2010-3%2016v11h7c8%200%2018%203%2019%205%201%201-2%2012-4%2013l-1%203-2%205c-2%202-3%204-3%208%200%206-1%207-3%207h-8l-7-1h-7l2-7c3-8%203-13%200-13l-6%202a4911%204911%200%2000-42%2011c-3%200-3%200-3%203%200%206%201%2011%203%2011l1%202c-1%201%200%203%202%205%203%203%203%205%200%207l-2%204c0%202-1%203-2%203-3%201-4%201-4-5a266%20266%200%2000-4-24l-1-4-6%201-5-1%203-1v-1l-15%203-77%2013-10%202-1%2013%201%2014a671%20671%200%200041-10v-2c1-2%204%200%204%202s0%202%204%201l5-2%2014-2%2035-5c4%200%204%200%204%202s0%202%201%201a256%20256%200%20008%2030l11-8c5-4%2034-13%2036-11%201%201-1%203-7%206l-14%2010-6%206h103l104-1c2-1%205-8%204-8l2-1%204-3%201-2%201-2h2c2%200%202%200%201-1l7-2h10l-2%208-3%209-1%203h30v-41c0%205%200%205-4%206-6%202-12%202-16%201h-6l-10%202a942%20942%200%2000-59%208c-4%200-5%202-1%202%201%200%202%200%201%202l-1%201h-2l-11%202-12%202c-14%202-24-1-26-9-2-4-2-4-12-3-4%201-4%203%200%203l3%201v3h-1l-4-2-6-2c-9-1-15-5-8-5%204%200%2012-3%2012-5l2-2c2-2%201-2-3-4h-9l-9%201c-8%200-9%200-12-2l-5-2c-2%200-5-3-5-5l5-3c1%201%2013-1%2015-2%202-2%203-2%208-1l12%202c3%200%207%202%2015%206%2015%2010%2015%2010%2025%2010%2019-1%2052-8%2065-14%2026-11%2030-14%2024-17l-3-4-2-4-2-3-2-4c-1-1-1-2%204-6%206-5%2018-11%2024-12%206%200%206%200%2014%2021%202%203%202%202%202-19v-22l-5%201c-6%200-6%200-10-8l-2-2c0%203-7%206-9%204l-2-1%201%202v2c-2%200-3-2-3-4l2-1c6-3%208-5%207-7l1-1c2%201%203-2%202-5l-2-4v-5l-2-9c0-7-3-17-3-13%200%202%200%202-1%200l-1-4v-2l1%202c1%201%201%201%201-1l-2-3-1-3c1-2%200-3-1-3h-1c0-3-7-10-13-12-9-4-21-6-40-6-18%200-24%201-24%203l4%203%204%203%202%203%203%203c0%203-6%209-7%209h-2l1%201c1%200-3%205-8%208-4%203-5%203-1-1%202-2%202-3%201-4v-2c-2-1-2-1-2%202v1l-1-17c1-2%200-4-3-6l-3-3-3%202-3%203v3l-2%206c-1%202-1%202-1%200s-1-3-3-1l-4%201-3%201v-5c1-7%203-14%207-21l3-5%201%202%202%206c0%205%202%205%204%201v-7l-2-7c-1-3-1-4-3-3l-1-1%203-1%201-1%202%201c1%202%202%202%205%202%205-1%205-4%202-6-4-2-2-6%202-4%202%201%202%201%202-1-1-3-4-4-7-1-3%204-4%203-1-1l4-3c3%200%203-1%202-11l-1-10-1-1v-2l-1-1-1-3c0-2%200-2-2-2-1%201-2%200-2-1l-2-3c-1-2%200-2%208-3l10-2h-11l-8%202-2%201-1-2c0-1%203-2%2011-3l12-3c1-2%203-3%203-1%200%203%2014%200%2019-4l9-3%205-1%203-1c1-1%202%200%202%201h2l2%201-20%206%203-2%203-2-4%201c-3%201-4%201-3%203%202%201%201%201-11%203-10%202-12%202-11%204a100%20100%200%200029-6l17-4a1030%201030%200%200123-8l-10%201h-24l-31-1h-33v8m122-3a700%20700%200%20013%2047v6l1%208%201%2012%202%2012%201%207V86l-1-18a1960%201960%200%2001-7-63M73%2039a1730%201730%200%2001-22%205c1%202%2034-3%2034-5%201-2%200-2-12%200m84%2015l-3%201-2%201-1%201-1%201-1%203c-3%202%202%204%207%203%206-1%207-3%201-2-4%200-4%200-3-1l5-2%202-1%209-2%2010-2c0-1-7-1-15%201-4%201-5%200-5-1h-3m-52%205l3%201h4l-4%201c-4%201-5%202-2%202l3%201%202%201v1c-2%201-2%201%200%201h3l-3%201-1%201%201%202%201%201v8c-1%201%200%201%201%201%202%200%202%200%201%201l-1%201v2c-1%201-1%201%201%201v2c2%200%202%203-1%206s-3%204%203%204c2%200%202%200%201%201s-1%203%201%204l-1%201h-2l2%201v4l1%201v1c-1%201-1%201%201%201h2l-2%201c-2%200-2%201-1%201v2l1%201v1c-1%201-1%201%201%201s2%200%201%201c-2%200-2%201-1%203v9l1%202%201%201v1c-1%201-1%201%201%201l1%201c-2%201-2%204%200%204v1c-2%201-2%201%200%201s2%200%201%201l-3%202-2%201c0-2-1-2-2-2-1%201-2%204%200%206a685%20685%200%200075-16l-12%202a342%20342%200%2001-26%205h-2l-9%201-8%201-3%201-2%201v-1l1-2%201-2c2%200%202%200%200-1-3%200-4-2-1-3%203%200%202-2-1-1l-2-1%201-2%201-1-1-1c-3%200-2-3%200-3%201-1%201-1-1-1l-2-1-1-1-2-2c-1-3%200-3%202-3s4-2%201-2v-3l1-2%202-2h-2l-2-1%202-2%202-1-4-1-4-1%201-1%201-1-2-1-2-1%202-2%201-1v-1l1-1-3-1h-3c0-1%206-2%208-1%202%200%202-2%201-3s3-1%208-1l2-2-1-1-1-1-1-1c-1-1%200-1%202-1%203%200%204-2%201-2l2-1%203-1h-4c-3%200-3%200-1-1s0-1-4-1h-5l2-1h-3c-2%200-2%200-1-1l-5-1h-3l1-1c0-1%203-2%2010-3l9-2-5-1h-4v-2l1-2%203-1%204-1-4-1h-3c3%200%202-2%200-2-6%202-14%202-14%201l-3-1c-1%200-2%200-1-1l-3-1-4%201m69%205l-5%201-5%201h-6c-10%202-9%202-9%206l1%205h4v-3h4l1%202c1%201%2025-3%2025-4h-2l-3-1%202-1c1%201%205-2%204-3l1-2c1-1-11-2-12-1m32%2012l2%207c2%203%202%205%201%207l-1%205%201-1c1-3%203-4%203-2%200%201%208%204%2013%204l9-2c6-4%2018-8%2023-8%206-1%207%201%202%206-3%203-4%206-2%206%203%200%2013-19%2011-22-1-2-13-3-16-1l-6%202-3%201c-1%202-11%201-11%200h-1l-3%202v2c0%204-2%206-6%204l-4-1-2-1h-1l-2-2-2-2-1-1-2-3c-2-2-2-2-2%200m-26%203h-1c-1-1-13%200-25%203-2%200-2%200-1-1s1-1-2-1l-3%201%201%201c2-1%202%200%203%204%200%205%200%205%203%205s4-1%202-3c-3-3-2-3%201-3%202%200%202%201%202%203s1%202%203%202l19-4c1-1%200-1-1-1-2%200-2%200-1-1l1-2c-1-1%202-4%203-3l-1%202v1l1%201%201%203%201-1h2l4-1c0-1-1-2-3-2s-2-1-2-3c0-3-6-3-7%200m11%2010l-18%203c-22%203-21%203-19%206%201%201%2013-1%2015-3l13-3c6%200%2014-2%2014-3l-1-1-4%201m16%2011c-1%205-1%205-11%207a481%20481%200%2000-23%202l24-5a314%20314%200%2000-42%208l2%201-2%201%201%201c2%201%202%201%201%203l-1%201%202%201c1%201%2013-1%2013-2h-7c-3%201-4%200-1-2%201-2%207-3%2031-7%2013-2%2014-2%2014-9%200-5-1-5-1%200m-25%2021c-27%204-27%204-26%206s30-3%2036-5l10-3%208-2-28%204m3%207l-16%201c-11%201-13%202-7%204%204%201%206%204%203%204l-1%201c1%201%2012-1%2012-3l3-1c2%200%202-1%202-2l2-2v2l2%201%202-2%202-2c1-1%202%200%202%201h-1l-2%201h7l1-2c0-3%200-3-11-1m80%2060l-4%202-4-2c-6-3-9-1-9%206%200%204%200%205-2%206-6%202-7%209-3%2011%202%200%202%201%201%202-2%206%200%209%207%207h7c6%204%2012%201%2010-5%200-2%200-3%204-7%205-5%205-7%200-9-3-2-3-3-3-6%201-4-1-4-1%200-1%204-4%204-5%201%200-3%203-6%206-6%201%201%202-2%200-2l-4%202m-9%2013c-3%205-2%2011%202%2011s6-4%206-9c-1-5-6-6-8-2'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3513513513513513,"src":"/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/4fe8c/rolwin.jpg","srcSet":"/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/aabdf/rolwin.jpg 150w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/9dc27/rolwin.jpg 300w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/4fe8c/rolwin.jpg 600w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/9842e/rolwin.jpg 900w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/47498/rolwin.jpg 1200w,\n/static/27dc3a779cdfe1f4f30ec2caf3c3fe88/b4640/rolwin.jpg 2034w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/markdown-in-react","title":"Markdown in React","tags":["reactjs"],"excerpt":"记录点滴: react-markdown是一款非常优秀的markdown转html的react组件，但是官方文档是全英文而且也没有说明的太详细，把开发遇到的问题以及实践方法记录下来。","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/activity-component-builder","title":"活动组件开发实战总结","tags":["nodejs"],"excerpt":"项目总结","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}}]}},"pageContext":{"postPath":"blog/happy-talk-about-react-redux","translations":[{"hreflang":"en","path":"/blog/happy-talk-about-react-redux"}]}},"staticQueryHashes":["4097791827"]}