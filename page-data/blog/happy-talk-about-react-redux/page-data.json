{"componentChunkName":"component---src-templates-post-post-jsx","path":"/blog/happy-talk-about-react-redux","result":{"data":{"markdownRemark":{"html":"<h3>Happy Talk about React Redux</h3>\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#%E5%85%B3%E9%94%AE%E8%AF%8D\">关键词</a></li>\n<li><a href=\"#Hello-World\">Hello World</a></li>\n</ul>\n<h4>概述</h4>\n<h4>来到<a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"nofollow\">React Redux官网</a>, 了解了下内容得到以下几点重要信息：</h4>\n<ul>\n<li>它为什么出现:\n本身Redux是一个独立的库，它其实可以不仅仅用于react;为了让它更好的服务于react,于是有了react redux的出现。React Redux就是官方与React所绑定的Redux库。它为我们提供了一种合理的途径来进行数据与UI之间的绑定，这让我们的代码更加合理也同时又降低了一些使用门槛。</li>\n<li>\n<p>它的特点:\nReact-Redux 将所有组件分成两大类：</p>\n<ul>\n<li>\n<p>UI 组件（presentational component）这是开发者需要自己的业务实现组件</p>\n<ul>\n<li>只负责 UI 的呈现，不带有任何业务逻辑</li>\n<li>没有状态（即不使用this.state这个变量）</li>\n<li>所有数据都由参数（this.props）提供</li>\n<li>不使用任何 Redux 的 API</li>\n</ul>\n</li>\n<li>\n<p>容器组件（container component）容器组件由 React-Redux 自动生成</p>\n<ul>\n<li>负责管理数据和业务逻辑，不负责 UI 的呈现</li>\n<li>带有内部状态</li>\n<li>使用 Redux 的 API</li>\n<li>\n<p><strong>这里划重点!!!</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { connect } from &#39;react-redux&#39;\nconst VisibleTodoList = connect()(TodoList);</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>关键词</h4>\n<ul>\n<li><a href=\"#Provider%E6%8F%8F%E8%BF%B0\">Provider, &#x3C;Provider store={store}></a></li>\n<li><a href=\"#createStore%E6%8F%8F%E8%BF%B0\">createStore, const store=createStore(reducer)</a></li>\n<li><a href=\"#connect%E6%8F%8F%E8%BF%B0\">connect(mapStateToProps?, mapDispatchToProps? )</a></li>\n</ul>\n<h3>Provider描述</h3>\n<p>原文为:</p>\n<p>The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function.</p>\n<p>翻译成中国话就是: </p>\n<p>Provider让任何嵌套组件(注意前提!!!它的被connect()包裹着才行哦!!!)都能获取到Redux的数据</p>\n<h3>createStore描述</h3>\n<p>创建一个数据池，供Provide使用</p>\n<h3>connect描述</h3>\n<h4>连接组件和redux-store</h4>\n<p>  connect : 用来连接react组件和redux store, 生成react-redux的容器组件</p>\n<ul>\n<li>\n<p>参数 </p>\n<ul>\n<li>mapStateToProps : 前者负责输入逻辑, 即将state映射到 UI 组件的参数（props）</li>\n<li>\n<p>mapDispatchToProps : 后者负责输出逻辑, 即将用户对 UI 组件的操作映射成 Action</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { connect } from &#39;react-redux&#39;\nconst VisibleTodoList = connect(\nmapStateToProps,\nmapDispatchToProps\n)(TodoList)</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Hello World</h3>\n<blockquote>\n<p>我们以官网的todos例子来说明</p>\n</blockquote>\n<ul>\n<li>\n<p>index.js里面直接用Provide包裹整个应用; store具体是什么?? 我们先hold住，把这个<a href=\"#%E6%A2%97\">梗</a>记住，先把全局过一遍，细节一会解释。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Provider } from &quot;react-redux&quot;;\nimport store from &quot;./redux/store&quot;;\n&lt;Provider store={store}&gt;\n&lt;App /&gt;\n&lt;/Provider&gt;,</code></pre></div>\n</li>\n<li>\n<p>然后我们接着看App可以怎么定义: <strong>嵌入了AddTodo,TodoList和VisibilityFilters三个组件</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import AddTodo from &quot;./components/AddTodo&quot;;\nimport TodoList from &quot;./components/TodoList&quot;;\nimport VisibilityFilters from &quot;./components/VisibilityFilters&quot;;</code></pre></div>\n</li>\n</ul>\n<p>export default function TodoApp() {\nreturn (\n<div className=\"todo-app\">\n...\n<AddTodo />\n<TodoList />\n<VisibilityFilters />\n</div>\n);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- #### 先看AddTodo这个组件,注意两点:\n  - 暴露组件用的是 **export default connnect(...)(AddTodo)** 这个格式！！！它就是我们前面提到的 [连接组件和redux-store](#连接组件和redux-store)\n  - connect(null, { addTodo }) 它写成这样更能让你引起注意 connect(null, { &quot;addTodo&quot; : addTodo }); 注意重点！前面说过connect的参数(第一个输入, 第二个输出)，现在这里是输出(缺少输入, [定义输入的例子看这里](#TodoList))，其实是对应props。{ &quot;addTodo&quot; : addTodo } 表示 this.props.addTodo = addTodo; 这里的后者addTodo来自&quot;../redux/actions&quot;。所以接下来我们赶紧看下这个文件</code></pre></div>\n<p>import { connect } from \"c\";\nimport { addTodo } from \"../redux/actions\";\nclass AddTodo extends React.Component {\n...\nhandleAddTodo = () => {\nthis.props.addTodo(this.state.input);\nthis.setState({ input: \"\" });\n};\n...\n<button className=\"add-todo\" onClick={this.handleAddTodo}>\nAdd Todo\n</button>\n}\nexport default connect(null, { addTodo })(AddTodo);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- ../redux/actions 这里面原来就是定义了返回什么。 以addTodo来看, \n  - 原来connector的第二个参数(输出)是个返回函数，\n  - 返回的内容格式固定为: {type:..., payload:...} type为名称(actionTypes就是起到个定义常量类型的作用), payload为传递的内容</code></pre></div>\n<p>import { ADD<em>TODO, TOGGLE</em>TODO, SET<em>FILTER } from \"./actionTypes\";\nlet nextTodoId = 0;\nexport const addTodo = content => ({\ntype: ADD</em>TODO,\npayload: {\nid: ++nextTodoId,\ncontent\n}\n});\nexport const toggleTodo = id => ({\ntype: TOGGLE_TODO,\npayload: { id }\n});\nexport const setFilter = ...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 到这步我们回到AddTodo这个组件聚焦到它的实现主线：input输入中todo的名称，点击Add Todo就新增这个todo. \n  - \n    ```\n    handleAddTodo = () =&gt; {\n      this.props.addTodo(this.state.input);\n      this.setState({ input: &quot;&quot; });\n    };\n    &lt;button className=&quot;add-todo&quot; onClick={this.handleAddTodo}&gt; \n    ```\n  - 划重点！！！ \n    - 假想: 如果我们不用redux，这里应该是会通过prop传入一个todos的集合, 在发生新增动作时把新的todo加入todos的集合(组件间逐层传递需要的数据)\n    - 现状: 我们通过connector的第二个参数(输出)定义好一个返回函数: \n      ```\n      ()=&gt;{type: ..., payload: ...}\n      ```\n    - 思考差异: 你们有发觉目前现状少了步骤吗?! \n      - 假想中props传入了todos集合, 新增动作发生时把todo加入。如果说用户点击是**触发点**, todo是**货物的内容**，把货物归于todos这个仓库就是**发生的事件**\n      - 现状中新增动作一样，**触发点**同样是用户点击, **货物的内容**是{type:..., payload:...}中的**payload**, 把货物怎么处理的**发生的事件**却没有！\n      - 很显然不去处理货物是不完整的！！！这里react redux是怎么帮我们处理的呢？ 我们别忘了还有**type**! 还记得这句话吗？“Provider让任何嵌套组件(注意前提!!!它的被connect()包裹着才行哦!!!)都能获取到Redux的数据” React Redux就是让数据不用逐层传递，全局可获取，集中化管理，那么肯定还会有个与这个**type**对应的**发生的事件**\n- #### “梗” 还记[这个梗](#Hello-World)吗? &quot;store具体是什么??&quot;\n  为了探究**发生的事件**，我们就继续看看这个store是什么。\n  - ./redux/store 它图通过redux.createStore实例化了store给Provider用。我们可以认为它就是我们这个应用中的数据池了; createStore它消耗了一个参数:reducers\n    ```\n    import { createStore } from &quot;redux&quot;;\n    import rootReducer from &quot;./reducers&quot;;\n    export default createStore(rootReducer);\n    ```\n  - ./reducers 这里用到了redux.combineReducers(他合并reducer), 这只是插曲！我们的目标是探索**发生的事件**是哪里定义？如何和前面的**货物**关联起来！所以我们应该关注合并的**reducer**! \n    ```\n    import { combineReducers } from &quot;redux&quot;;\n    import visibilityFilter from &quot;./visibilityFilter&quot;;\n    import todos from &quot;./todos&quot;;\n    export default combineReducers({ todos, visibilityFilter });\n    ```\n- reducer: &quot;./todos&quot; 看到这个名字，我预感离真相已经不远了。 看看这里定义了什么吧:\n  - 暴露了个function( state, action )\n  - function中逻辑为: 根据**action.type**类型，返回与之相应的内容\n  - 返回与之相应的内容是什么??? 仔细看!!! 它这里其实正是在实现一个**货物**归仓的**事件**。 看到这就完全明了了react redux是如何实现**触发点**, **货物的内容**，以及**发生的事件**的全部了。</code></pre></div>\n<p>  import { ADD<em>TODO, TOGGLE</em>TODO } from \"../actionTypes\";\nconst initialState = {\nallIds: [],\nbyIds: {}\n};\nexport default function(state = initialState, action) {\nswitch (action.type) {\ncase ADD<em>TODO: {\nconst { id, content } = action.payload;\nreturn {\n...state,\nallIds: [...state.allIds, id],\nbyIds: {\n...state.byIds,\n[id]: {\ncontent,\ncompleted: false\n}\n}\n};\n}\ncase TOGGLE</em>TODO: {\nconst { id } = action.payload;\nreturn {\n...state,\nbyIds: {\n...state.byIds,\n[id]: {\n...state.byIds[id],\ncompleted: !state.byIds[id].completed\n}\n}\n};\n}\ndefault:\nreturn state;\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- #### TodoList \n\n( 这里面缺少输出, [定义输出的例子看这里](#先看AddTodo这个组件,注意两点:) )\n\n别忘了，我们还没讨论connector的输入(该组件内获取使用)。现在看看TodoList这里的Connector的参数：输入定义\n\n- #### 看代码中的关键：\n- 这里的todos从哪来的？父级定义中没提供。\n  ```\n  TodoList = ({ todos }) =&gt; (\n  ```\n  ```\n  export default function TodoApp() {\n    return (\n      &lt;div className=&quot;todo-app&quot;&gt;\n        &lt;h1&gt;Todo List&lt;/h1&gt;\n        &lt;AddTodo /&gt;\n        &lt;TodoList /&gt;\n        &lt;VisibilityFilters /&gt;\n      &lt;/div&gt;\n    );\n  }\n  ```\n- 输入的定义，它负责提供了组件内部所需的这个todos。 所以它最终返回是 { todos: todos }。于是该组件内拿到了todos数据用来后续的渲染。</code></pre></div>\n<p>  const mapStateToProps = (state) => {\nconst { visibilityFilter } = state;\nconst todos = getTodosByVisibilityFilter(state, visibilityFilter);\nreturn { todos };\n};\nexport default connect(mapStateToProps)(TodoList);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- state是什么？我们留意到state中有个visibilityFilter，其实state就是我们前面redux.combineReducers(他合并reducer)所产生的数据池。state.visibilityFilter就是对应visibilityFilter的数据。\n\n\n- 最后来个极简总结\n- Provider包裹App，\n- Provide的store由redux.createStore生成\n- connector连接react组件(业务内容与逻辑)和Redux Store; connector(输入:{&#39;xxx&#39;: 输入数据 }，输出:{&#39;xxx&#39;: 货物内容 })(组件) (**触发点**，**货物**)\n- redux.createStore中定义reducer(要发生的事件)\n- reducer(state, action) state为初始值， action为事件类型 (**发生的事件**)\n- 简写代码\n  ```\n  &lt;Provider store&gt;\n  &lt;App&gt;\n  &lt;redux-components&gt;\n  &lt;/App&gt;\n  &lt;Provider&gt;\n\n  Provider.store = redux.createStore( redux.combineReducers( {reducerA, reducerB} ) )\n  reducers.A = function(state = initialState, action) {\n    //inistialState为该数据初始值\n    //action是触发点触发后dispatch的货物，\n    //action的格式通常定为{type: ..., payload: ...}; type为该货物的标识, reducer中根据type做出相应的事件反应; payload为货物信息。\n    return state; //或者更复杂的数据 例如: {state, a, b, ...}\n  }\n  redux-component-A = ReactRedux.connector(ReduxIn, ReduxOut)(component-A)\n\n  //state为Redux的数据池，能获得定义过的全部数据, 名字在redux.combineReducers( {reducerA, reducerB} )中就确定了\n  ReduxIn = (state)=&gt;{\n    return { a:A, b:B } \n    //a,b都是供组件内使用，传递state中的数据进入组件中\n    //A和B是传入的数据, 可能是由state的数据进行组装而来的\n  }\n\n  ReduxOut = {\n    a:A, b:B \n    //a, b都会在组件中使用，某事件发生时，派发消息，消息可以将组件中的数据一并传出来，并最终到达Provider.store。\n    //A和B的通常格式为{type, payload}\n  }\n\n  //React-Redux则会在Reducer内定义根据action.type来监听并响应以做出反应\n  ```</code></pre></div>","timeToRead":8,"frontmatter":{"title":"细说React-Redux","date":"06 Feb 2019","tags":["reactjs"],"path":"blog/happy-talk-about-react-redux","excerpt":"记录点滴: 从redux过度到了react-redux。记录下相关的有趣的一些点。","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/a7715/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/8f7df/placeholder.jpg 250w,\n/static/9757369cb7d5b643993b7f059d41e2c1/0f3a1/placeholder.jpg 500w,\n/static/9757369cb7d5b643993b7f059d41e2c1/a7715/placeholder.jpg 1000w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/elegant-nodejs-server","title":"如何更加优雅的实现一个nodejs后台","tags":["nodejs"],"excerpt":"更加优雅的实现一个nodejs后台","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/k8s","title":"k8s","tags":["运维"],"excerpt":"运维","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='400'%20viewBox='0%200%20400%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M185%2027A29429%2029429%200%200074%2080c-14%207-18%2010-20%2014-2%203-5%2016-11%2041l-21%2090c-4%2017-4%2023%200%2030%205%209%2091%20113%2095%20116%208%205%209%205%2087%205h73l4-3a2242%202242%200%200097-119c5-8%204-9-12-82l-18-73c-3-8-6-10-75-43l-66-32h-8c-7%200-9%200-14%203m8%2045c-2%203-2%204-2%208%203%2017%203%2019%202%2022l-2%205c-1%201-3%202-7%202-18%202-39%2012-53%2025-7%207-10%206-22-6-11-10-15-12-19-6-4%205-2%209%2011%2018%208%204%2011%206%2012%2010l2%204-3%205c-9%2015-13%2033-13%2052l-1%2013-4%203c-2%202-5%202-14%203-14%202-17%204-17%2010%200%208%206%209%2020%203%2014-4%2020-4%2022%202%206%2017%2021%2037%2038%2049%205%203%205%203%205%208-1%205-1%206-8%2017-6%209-6%2013-3%2017%206%205%2012%201%2017-13%202-8%204-11%207-15l4-3%206%202c16%206%2037%206%2057%201%208-2%208-2%2010%200%203%202%207%209%2010%2017%203%2011%209%2015%2014%2011%206-4%205-7-4-21-8-12-8-16-1-21%2016-10%2035-35%2039-50%201-4%208-5%2018-2%2013%205%2016%206%2019%204%204-2%204-4%204-7-1-4-5-6-16-8-21-2-21-3-21-19%200-19-4-35-13-51-3-7-3-6%200-13l17-12c8-5%209-14%202-16-4-2-7%200-17%209l-11%209-4%201c-1%201-2%200-7-4-14-13-35-23-53-26-4%200-6-1-6-2l-2-4V91c2-15%201-17-1-20-4-3-8-3-12%201m-15%2060c-13%204-36%2018-34%2021%201%202%2034%2025%2036%2025%205%200%207-3%207-19l2-22c0-8%201-8-11-5m31%203a455%20455%200%20013%2039c1%203%205%205%208%203l35-24c0-1-10-10-18-14-7-4-17-7-24-8l-4-1v5m-83%2042c-2%204-5%2010-5%2014-2%206-4%2028-3%2028l21-6c30-9%2031-9%208-30l-17-14-4%208m126%206c-17%2015-18%2017-16%2021%202%203%202%203%2025%2010l17%205c2%200%202%200%202-11l-3-18c-2-8-8-21-9-21l-16%2014m-63%2020l-4%205%201%206c2%205%202%206%207%209l6%203%206-3c5-3%206-4%207-9l1-6-4-5-3-5h-14l-3%205m41%2029c-5%203-5%205%204%2027l9%2020a81%2081%200%200032-40%20343%20343%200%2000-45-7m-87%203l-19%203c-3%202%207%2019%2016%2029l15%2012%208-19c13-30%2012-30-20-25m53%2014l-22%2039c7%205%2044%205%2049%200%201-1-16-33-19-37-3-2-5-3-8-2'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1,"src":"/static/6a347940f064146525be36b805414901/bc59e/k8s.png","srcSet":"/static/6a347940f064146525be36b805414901/6d161/k8s.png 150w,\n/static/6a347940f064146525be36b805414901/630fb/k8s.png 300w,\n/static/6a347940f064146525be36b805414901/bc59e/k8s.png 512w","sizes":"(max-width: 512px) 100vw, 512px"}}}}}},{"node":{"frontmatter":{"path":"blog/flask","title":"flask","tags":["悦读"],"excerpt":"悦读","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='157'%20viewBox='0%200%20400%20157'%20preserveAspectRatio='none'%3e%3cpath%20d='M28%206c-2%202-1%203%201%206l2%203-3%203c-2%203-3%204-2%207%200%203%200%203-4%205-4%201-5%203-4%205l-3%203c-5%204-5%208-2%2016l5%2017c10%2040%2036%2070%2069%2078%2020%205%2048%205%2066%200l8-1c1%201%208-1%2014-3%205-2%200-7-5-6h-9c-2%201-16%200-16-1l2-3c5-6-1-7-7-1l-5%204-8-2c-16-4-28-12-38-24-14-17-16-24-18-54-2-20-2-20%208-17%205%201%208%201%206-2h-2v-1c3%200-1-2-8-5l-17-8-6-3c-5-2-6-2-6-4%200-3%200-3-5-3-4%200-5-1-5-4%200-6-5-8-8-5m166%207c-8%204-9%205-4%208s5%204%205%2038c0%2033%200%2031-6%2035-4%202%200%203%2013%203%2011%200%2013-1%2013-2l-4-3c-7-2-6%200-7-42V10c-1-1-2-1-10%203m140%200c-9%204-9%205-4%208%205%202%205%202%205%2036%200%2030%200%2033-4%2035l-3%203c0%202%200%202%2010%202a306%20306%200%200117-2c0-2-2-3-5-3-5%200-7-13-3-16s5-2%208%203l9%2011%205%207h8c11%200%2015-4%206-5-5-1-10-6-17-15-8-10-8-11-4-14%205-4%2010-7%2015-8%206-2%207-3%206-5-2-2-28-2-28%201l4%202c3%201%204%202%202%204-2%203-14%2012-15%2012l-1-28-1-30c0-3-3-2-10%202m-214%204l4%204c5%204%205%205%205%2039-1%2030-1%2031-6%2033-2%200-3%202-3%202%201%202%2031%202%2032%200l-3-3c-10-2-10-2-10-21l1-12h8c8%200%2010%201%2012%207l3%203c2-1%203-24%202-25-2-1-4%201-5%204-1%204-4%205-14%205-7%200-7%200-7-15%200-17-1-16%2012-16s15%201%2018%207c4%206%206%204%206-6l1-7h-28l-28%201M52%2034l-15%204c-10%203-9%202-7%208%201%202-3%201-6-2-2-2-5-2-8%201-2%201-3%206-1%207l1-2%202-4c1-2%204-1%202%201-1%201-1%201%202%203h4c1-2%202-2%204-2%203%201%205%201%208-1l13-4c15-2%2021-4%2021-8%200-2-1-2-6-2s-6%200-5%202l-1%202-2-2c0-2-1-2-6-1m9%2010c-4%201-5%202-5%203l-2%201h-3l-3%201-3%202-5%202c-3%200-3%200-3%202%202%205%202%206%200%207-5%201-8%207-3%207l2%201c1%201%205-2%204-3%200-2%202-1%203%201v1l-1%202-1%201c-2%200-2%201-2%204l-1%203c-1%200-2-3-1-5%200-3-2-4-4-2v4l2%203v2l3%204c2%203%202%203%204%202%201-1%201-2-1-3-3-2-4-4-2-4%201%200%202-1%201-2l1-2c1-1%201%200%201%202%200%203%200%203%202%201%203-1%203-1%204%201%203%203%202%204%200%204s-2%200%200%202l2%205c1%203%202%204%205%204l5%201h1l3%201%202%203-2%202c-2%202-2%202%200%203l3%202c2%200%205%204%205%206l-2%201c-2%200%200%201%205%204%209%204%2015%2010%2012%2011-3%200-5-1-5-2%201-1%200-1-1-1s-2%200-1%201c0%202%201%202%207%203%203%201%204%201%204%204%200%202%201%203%203%202l4%202%202%201%202-1h4c1-1%204%200%208%201%2010%203%2014%204%2016%203l-3-2-5-2-4-1-7-4-5-3c-4%200-11-6-14-11l-13-16c-4-4-5-5-4-6v-3l-2-9c-2-7-3-8-4-6h-1l2-3c1-1%201-1-1-2v-2c1-1%200-18-1-19l-1%201-1%203c-3%202-4-1-2-5%201-2%201-2%202%200s2-1%202-5c-1-4-1-4-7-3m234%204c-8%201-12%206-12%2014%200%206%202%208%2013%2014s13%208%2011%2012c-3%206-14%205-21-2-4-5-5-4-5%203%200%206%201%207%2015%208%2014%200%2021-4%2021-14%200-7-3-9-13-14-11-6-13-8-13-11%200-7%2015-6%2019%201%201%203%206%203%206%200l-2-5c0-3-1-4-2-5-4-1-13-2-17-1m-56%202c-7%203-12%207-12%209%201%206%208%205%2012-2%202-3%203-3%206-3%205%200%207%203%207%2010v5l-7%202c-16%205-21%208-21%2015%200%203%201%205%203%208%205%204%2010%204%2020%201l6-2%202%202c3%203%205%203%2010%200%207-3%208-8%202-7-5%201-5%201-5-18V54l-4-3c-4-4-12-4-19-1m5%2026c-7%202-9%204-9%209s6%208%2014%205c3-2%203-2%203-8%200-8-1-8-8-6'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.542372881355932,"src":"/static/6daa80cf53d6fb42b1d59e5410143ee6/cc5ae/flask-logo.png","srcSet":"/static/6daa80cf53d6fb42b1d59e5410143ee6/6d161/flask-logo.png 150w,\n/static/6daa80cf53d6fb42b1d59e5410143ee6/630fb/flask-logo.png 300w,\n/static/6daa80cf53d6fb42b1d59e5410143ee6/cc5ae/flask-logo.png 419w","sizes":"(max-width: 419px) 100vw, 419px"}}}}}},{"node":{"frontmatter":{"path":"blog/activity-component-builder","title":"活动组件开发实战总结","tags":["nodejs"],"excerpt":"项目总结","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/scrapy","title":"scrapy.com","tags":["悦读"],"excerpt":"悦读","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='124'%20viewBox='0%200%20400%20124'%20preserveAspectRatio='none'%3e%3cpath%20d='M51%204A61%2061%200%20006%2082c17%2042%2067%2054%2099%2023C141%2068%20117%205%2065%203L51%204m-5%207a54%2054%200%201065%2028%2054%2054%200%2000-65-28m113%2017c-5%202-7%204-9%208-5%209-2%2015%2011%2029%2012%2012%2013%2015%2011%2021-3%206-12%207-20%202-2-1-2-1-3%202-3%204-2%206%201%208%2010%206%2028%202%2033-7%205-11%203-18-11-31-13-14-15-20-8-24%203-1%204-1%2014%201%205%201%207-6%202-8-4-2-17-2-21-1m-66%208c-2%200-8%205-14%2010l-11%208c-2%200-1%203%201%204%204%204-6%2019-20%2031-7%206-6%206%201%201%2010-7%2019-18%2022-26l4-4c9-4%2025-14%2026-16%203-4%202-5%200-8-3-2-5-3-9%200m115%2012c-11%202-17%2011-16%2027%200%2016%203%2023%2015%2025%2010%202%2019-1%2019-7-1-3%200-3-9-1-9%201-13-4-14-16-1-16%206-23%2018-19%204%202%206%200%206-4s-11-7-19-5m73%200c-11%202-15%206-12%2010%202%202%202%202%208%200%2010-3%2013-2%2012%207%200%203-1%203-5%204-10%200-17%206-19%2013-2%2010%204%2018%2014%2018l8-1h14c2-1%203-5%201-7-2-1-2-4-2-19%200-22-1-24-12-25h-7m45%201c-4%201-6%202-8%201h-4c-2%202-2%202-2%2036l1%2034%205%201h5v-21h5c10%202%2018-3%2022-12%203-5%204-22%202-28-4-11-14-15-26-11m-79%200c-2%201-4%202-5%201h-5l-2%201v49l4-1%206-1%201-20c0-20%200-20%208-20%206%200%207-1%207-6%200-4-7-6-14-3m113%200c-2%202%200%207%2011%2040l3%208-2%205c-2%208-4%2010-9%2010-3%200-6%202-6%204s5%204%209%204c10%200%2016-11%2028-53%205-17%205-18%201-19-6-1-7%201-10%2014-5%2020-5%2020-6%2018l-4-14c-5-17-5-18-9-18l-6%201m-32%208c-5%202-5%204-5%2018%200%2015%201%2017%207%2017%207%200%2011-8%2011-20%200-13-6-19-13-15m-49%2022c-6%206-3%2014%204%2013%205-1%206-3%206-10v-6h-4l-6%203'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":3.1914893617021276,"src":"/static/dfe248c801b1b9a04291884de95508bc/6862f/scrapylogo.png","srcSet":"/static/dfe248c801b1b9a04291884de95508bc/6d161/scrapylogo.png 150w,\n/static/dfe248c801b1b9a04291884de95508bc/630fb/scrapylogo.png 300w,\n/static/dfe248c801b1b9a04291884de95508bc/6862f/scrapylogo.png 322w","sizes":"(max-width: 322px) 100vw, 322px"}}}}}},{"node":{"frontmatter":{"path":"blog/koa-booster","title":"Koa-booster 文档介绍","tags":["nodejs"],"excerpt":"让Koa变得更简单","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/good-practise-sync-code","title":"商品码同步实战总结","tags":["nodejs"],"excerpt":"项目总结","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/reading-about-casl","title":"了解CASL后关于权限的思考","tags":["abac"],"excerpt":"一个基于属性的访问控制模块","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/markdown-in-react","title":"Markdown in React","tags":["reactjs"],"excerpt":"记录点滴: react-markdown是一款非常优秀的markdown转html的react组件，但是官方文档是全英文而且也没有说明的太详细，把开发遇到的问题以及实践方法记录下来。","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/BI-Data-Visualization","title":"BI数据可视化","tags":["nodejs"],"excerpt":"项目总结","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='288'%20viewBox='0%200%20400%20288'%20preserveAspectRatio='none'%3e%3cpath%20d='M190%20103c-4%201-13%209-15%2011-2%203-1%2051%201%2054%202%202%2021%208%2026%208%204%200%209-3%2011-5l3-2%205-3%203-3v-26l-1-27-27-9-6%202m2%2075l-10%205c-6%205-7%205-7%2010-1%206-1%206%2013%209%2015%204%2018%204%2028-2l8-4v-5c0-5%200-6-3-8-6-4-21-6-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.3888888888888888,"src":"/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg","srcSet":"/static/9757369cb7d5b643993b7f059d41e2c1/aabdf/placeholder.jpg 150w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9dc27/placeholder.jpg 300w,\n/static/9757369cb7d5b643993b7f059d41e2c1/4fe8c/placeholder.jpg 600w,\n/static/9757369cb7d5b643993b7f059d41e2c1/9842e/placeholder.jpg 900w,\n/static/9757369cb7d5b643993b7f059d41e2c1/47498/placeholder.jpg 1200w,\n/static/9757369cb7d5b643993b7f059d41e2c1/7f945/placeholder.jpg 1440w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}}]}},"pageContext":{"postPath":"blog/happy-talk-about-react-redux","translations":[{"hreflang":"en","path":"/blog/happy-talk-about-react-redux"}]}},"staticQueryHashes":["4097791827"]}